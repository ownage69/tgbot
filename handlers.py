from telebot import types
from database import add_user, get_user, update_subgroup
from database import add_to_queue

registered_users = {}

def register_handlers(bot):
    pending_labs = {}

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'), types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É'))
        markup.row(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'), types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å'))
        markup.row(types.KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ª–∞–±—ã'))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å. –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞–ø–∏—à–∏ /queue –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é", reply_markup=markup)

    @bot.message_handler(func=lambda message: message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    def queue_command(message):
        user_id = message.from_user.id
        if get_user(user_id):
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è <b>(–¥–≤–∞ —Å–ª–æ–≤–∞)</b>", parse_mode='HTML')
            bot.register_next_step_handler(message, save_fi)

    def save_fi(message):
        words = message.text.strip().split()
        if len(words) != 2:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –µ—â—ë —Ä–∞–∑.")
            bot.register_next_step_handler(message, save_fi)
            return
        user_id = message.from_user.id
        fi = message.text.strip()
        add_user(user_id, fi)
        bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–ª –≤–∞—Å –∫–∞–∫: <b>{fi}</b>", parse_mode='HTML')

    @bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É')
    def choose_subgroup(message):
        user_id = message.from_user.id
        if not get_user(user_id):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /queue")
            return
        markup = types.InlineKeyboardMarkup()
        subgroupbtn1 = types.InlineKeyboardButton('1', callback_data='subgroup_1')
        subgroupbtn2 = types.InlineKeyboardButton('2', callback_data='subgroup_2')
        markup.row(subgroupbtn1, subgroupbtn2)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('subgroup_'))
    def handle_subgroup(call):
        user_id = call.from_user.id
        subgroup = call.data.split('_')[1]
        update_subgroup(user_id, subgroup)
        bot.answer_callback_query(call.id, f"–ü–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup} –≤—ã–±—Ä–∞–Ω–∞!")
        bot.send_message(call.message.chat.id, f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ø–æ–¥–≥—Ä—É–ø–ø—É <b>{subgroup}</b>", parse_mode='HTML')

    @bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ')
    def show_info(message):
        user_id = message.from_user.id
        user_data = get_user(user_id)
        if user_data:
            fi, subgroup = user_data
            subgroup = subgroup if subgroup else "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
            bot.reply_to(message, f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>{message.from_user.first_name}</b>:
–ó–∞–ø–∏—Å–∞–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫: <b>{fi}</b>
–ù–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã: <b>{subgroup}</b>""", parse_mode="HTML")

        else:
            bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    pending_labs = {}

    @bot.message_handler(func=lambda message: message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å')
    def select_lab(message):
        user_id = message.from_user.id
        if not get_user(user_id):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /queue")
            return

        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(str(i), callback_data=f'number_of_lab_{i}') for i in range(1, 9)]
        markup.row(*buttons[:4])
        markup.row(*buttons[4:])
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ...", reply_markup=markup,
                         parse_mode='HTML')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('number_of_lab_'))
    def sign_up_for_lab(call):
        user_id = call.from_user.id
        lab_number = call.data.split('_')[-1]

        user_data = get_user(user_id)
        if not user_data:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        fi, subgroup = user_data
        if not subgroup:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É!", show_alert=True)
            return

        if user_id in pending_labs:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–∏—Å—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É.", show_alert=True)
            return

        pending_labs[user_id] = lab_number
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id,
                         f"üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>.exe —Ñ–∞–π–ª</b> –∏–ª–∏ <b>—Å—Å—ã–ª–∫—É –Ω–∞ GitHub</b> –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ‚Ññ{lab_number}.",
                         parse_mode='HTML')

    @bot.message_handler(content_types=['document', 'text'])
    def handle_submission(message):
        user_id = message.from_user.id

        if user_id not in pending_labs:
            return

        lab_number = pending_labs[user_id]

        if message.content_type == 'document':
            if not message.document.file_name.endswith('.exe'):
                bot.send_message(message.chat.id, "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .exe —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub.")
                return
            submission = f"[–§–∞–π–ª] {message.document.file_name}"

        elif message.content_type == 'text':
            if "github.com" not in message.text:
                bot.send_message(message.chat.id, "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub –∏–ª–∏ .exe —Ñ–∞–π–ª.")
                return
            submission = f"[GitHub] {message.text}"

        else:
            bot.send_message(message.chat.id, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ .exe —Ñ–∞–π–ª –∏–ª–∏ GitHub —Å—Å—ã–ª–∫—É.")
            return

        fi, subgroup = get_user(user_id)
        success = add_to_queue(user_id, fi, subgroup, lab_number)

        if success:
            bot.send_message(message.chat.id,
                             f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é ‚Ññ<b>{lab_number}</b>\n{submission}",
                             parse_mode='HTML')
        else:
            bot.send_message(message.chat.id,
                             f"‚ö† –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é ‚Ññ{lab_number}.",
                             parse_mode='HTML')

        del pending_labs[user_id]
