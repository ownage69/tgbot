from telebot import types
from database import add_user, get_user, update_subgroup, add_to_queue, AVAILABLE_LABS, get_lab_queue_by_subgroup, get_user_labs, is_fi_taken

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
registered_users = {}

def register_handlers(bot):
    pending_labs = {}

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'), types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É'))
        markup.row(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'), types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å'))
        markup.row(types.KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ª–∞–±—ã'))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é", reply_markup=markup)

    def save_fi(message):
        words = message.text.strip().split()
        if len(words) != 2:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –µ—â—ë —Ä–∞–∑.")
            bot.register_next_step_handler(message, save_fi)
            return

        fi = message.text.strip()
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ —ç—Ç–æ –§–ò —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_fi_taken(fi):
            bot.send_message(message.chat.id, "–≠—Ç–∏ —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
            bot.register_next_step_handler(message, save_fi)
            return

        add_user(user_id, fi)
        bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–ª –≤–∞—Å –∫–∞–∫: <b>{fi}</b>", parse_mode='HTML')

    @bot.message_handler(commands=['remove'])
    def remove_from_queue(message):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å (–ø–æ Telegram ID)
        admin_id = 424895903  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID
        if message.from_user.id != admin_id:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        try:
            _, user_id_str, lab_number = message.text.strip().split()
            user_id = int(user_id_str)
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/remove <user_id> <lab_number>")
            return

        from database import remove_user_from_lab

        success = remove_user_from_lab(user_id, lab_number)
        if success:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ‚Ññ{lab_number}")
        else:
            bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞.")

    @bot.message_handler(func=lambda message: message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    def queue_command(message):
        user_id = message.from_user.id
        if get_user(user_id):
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è <b>(–¥–≤–∞ —Å–ª–æ–≤–∞) (!) —Å–º–µ–Ω–∏—Ç—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è</b>", parse_mode='HTML')
            bot.register_next_step_handler(message, save_fi)

    @bot.message_handler(func=lambda message: message.text == '–í—ã–≤–µ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ª–∞–±—ã')
    def show_queue(message):
        user_id = message.from_user.id
        user_data = get_user(user_id)

        if not user_data:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
            return

        fi, subgroup = user_data
        rows = get_lab_queue_by_subgroup(subgroup)

        if not rows:
            bot.send_message(message.chat.id, "‚õî –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã.")
            return

        queue_text = f"üìã –û—á–µ—Ä–µ–¥—å –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ (–ü–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}):\n"
        labs = {}

        for lab_number, student_fi in rows:
            if lab_number not in labs:
                labs[lab_number] = []
            labs[lab_number].append(student_fi)

        for lab_number in sorted(labs, key=lambda x: int(x)):
            queue_text += f"\nüî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è ‚Ññ{lab_number}:\n"
            for i, student_fi in enumerate(labs[lab_number], 1):
                queue_text += f"  {i}. {student_fi}\n"

        bot.send_message(message.chat.id, queue_text)

    @bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É')
    def choose_subgroup(message):
        user_id = message.from_user.id
        if not get_user(user_id):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –º–µ–Ω—è—Ç—å
        user_data = get_user(user_id)
        fi, subgroup = user_data
        if subgroup:
            bot.send_message(message.chat.id, f"–ü–æ–¥–≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: <b>{subgroup}</b>. –ï—ë –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.",
                             parse_mode='HTML')
            return

        markup = types.InlineKeyboardMarkup()
        subgroupbtn1 = types.InlineKeyboardButton('1', callback_data='subgroup_1')
        subgroupbtn2 = types.InlineKeyboardButton('2', callback_data='subgroup_2')
        markup.row(subgroupbtn1, subgroupbtn2)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É (!) –æ–ø—è—Ç—å –∂–µ —Å–º–µ–Ω–∏—Ç—å –≤ –±—É–¥—É—â–µ–º –µ–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('subgroup_'))
    def handle_subgroup(call):
        user_id = call.from_user.id
        new_subgroup = call.data.split('_')[1]

        user_data = get_user(user_id)
        if not user_data:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        fi, current_subgroup = user_data
        if current_subgroup:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É, –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è!", show_alert=True)
            return

        update_subgroup(user_id, new_subgroup)
        bot.answer_callback_query(call.id, f"–ü–æ–¥–≥—Ä—É–ø–ø–∞ {new_subgroup} –≤—ã–±—Ä–∞–Ω–∞!")
        bot.send_message(call.message.chat.id, f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ø–æ–¥–≥—Ä—É–ø–ø—É <b>{new_subgroup}</b>", parse_mode='HTML')

    @bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ')
    def show_info(message):
        user_id = message.from_user.id
        user_data = get_user(user_id)

        if not user_data:
            bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        fi, subgroup = user_data

        user_labs = get_user_labs(user_id)  # –í–æ—Ç –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∞–±

        if user_labs:
            labs_text = ", ".join(sorted(user_labs, key=int))
        else:
            labs_text = "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∞–±"

        bot.send_message(
            message.chat.id,
            f"""üë§ –í—ã: <b>{fi}</b>
üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: <b>{subgroup}</b>
üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ: <b>{labs_text}</b>""",
            parse_mode='HTML'
        )

    pending_labs = {}

    @bot.message_handler(func=lambda message: message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å')
    def select_lab(message):
        user_id = message.from_user.id
        if not get_user(user_id):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            return

        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(str(i), callback_data=f'number_of_lab_{i}') for i in range(1, 9)]
        markup.row(*buttons[:4])
        markup.row(*buttons[4:])
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ...", reply_markup=markup,
                         parse_mode='HTML')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('number_of_lab_'))
    def sign_up_for_lab(call):
        user_id = call.from_user.id
        lab_number = call.data.split('_')[-1]

        if lab_number not in AVAILABLE_LABS:
            bot.answer_callback_query(call.id, f"‚ùå –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è ‚Ññ{lab_number} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            return  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        user_data = get_user(user_id)
        if not user_data:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        fi, subgroup = user_data
        if not subgroup:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É!", show_alert=True)
            return

        if user_id in pending_labs:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–∏—Å—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É.", show_alert=True)
            return

        pending_labs[user_id] = lab_number
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id,
                         f"üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>.exe —Ñ–∞–π–ª</b> –∏–ª–∏ <b>—Å—Å—ã–ª–∫—É –Ω–∞ GitHub</b> –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ‚Ññ{lab_number}.",
                         parse_mode='HTML')

    @bot.message_handler(content_types=['document', 'text'])
    def handle_submission(message):
        user_id = message.from_user.id

        if user_id not in pending_labs:
            return

        lab_number = pending_labs[user_id]

        if message.content_type == 'document':
            if not message.document.file_name.endswith('.exe'):
                bot.send_message(message.chat.id, "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .exe —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub.")
                return
            submission = f"[–§–∞–π–ª] {message.document.file_name}"

        elif message.content_type == 'text':
            if "github.com" not in message.text:
                bot.send_message(message.chat.id, "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub –∏–ª–∏ .exe —Ñ–∞–π–ª.")
                return
            submission = f"[GitHub] {message.text}"

        else:
            bot.send_message(message.chat.id, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ .exe —Ñ–∞–π–ª –∏–ª–∏ GitHub —Å—Å—ã–ª–∫—É.")
            return

        fi, subgroup = get_user(user_id)
        result = add_to_queue(user_id, fi, subgroup, lab_number)

        if result == "not_available":
            bot.send_message(message.chat.id, f"‚ùå –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è ‚Ññ{lab_number} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        elif result is False:
            bot.send_message(message.chat.id, f"‚ö† –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é ‚Ññ{lab_number}.")
        else:
            bot.send_message(message.chat.id,
                             f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é ‚Ññ<b>{lab_number}</b>\n{submission}",
                             parse_mode='HTML')

        del pending_labs[user_id]
